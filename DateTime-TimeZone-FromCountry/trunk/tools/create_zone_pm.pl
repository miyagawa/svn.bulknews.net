#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;
use FindBin;
use LWP::Simple;
use Archive::Tar;

$Archive::Tar::CHMOD = 0;
my $pm_path  = "$FindBin::Bin/../lib/DateTime/TimeZone/FromCountry/Zone.pm";
my $zone_tab = "/tmp/zone.tab";

my $url  = $ARGV[0] or die "Usage: create_zone_pm.pl ftp://elsie.nci.nih.gov/pub/tzdata{year}{ver}.tar.gz\n";
my $ver = ($url =~ m!tzdata(\d{4}\w)!)[0]
    or die "Can't figure out version number from $url\n";

http_get_tzdata($url, $zone_tab);
my $zone = read_zone_tab($zone_tab);
generate_pm($zone, $pm_path, $ver);

unlink $zone_tab;

sub http_get_tzdata {
    my($url, $zone_tab) = @_;

    my $path = "/tmp/tzdata.tgz";
    warn "Saving $url to $path\n";
    LWP::Simple::mirror($url, $path) or die "HTTP get error: $url";

    warn "Extracting zone.tab\n";
    my $tar = Archive::Tar->new;
    $tar->read($path);
    $tar->extract_file('zone.tab', $zone_tab);

    unlink $path;
}

sub read_zone_tab {
    my $zone_tab = shift;

    warn "Parsing zone.tab\n";
    open my $fh, "<", $zone_tab or die "$zone_tab: $!";
    while (<$fh>) {
        next if /^\#/;
        chomp;
        my($cc, $coord, $tz, $comment) = split /\t/, $_;
        push @{$zone->{$cc}}, $tz;
    }

    return $zone;
}

sub generate_pm {
    my($zone, $pm_path, $ver) = @_;

    my $perl_data = Data::Dumper::Dumper($zone);
    $perl_data =~ s/^\$VAR1 = //;

    warn "Generating $pm_path\n";

    open my $fh, ">", $pm_path or die "$pm_path: $!";
    print $fh sprintf(<<'TEMPLATE', $ver, $perl_data);
# This file is auto-generated by tools/create_zone_pm.pl
# Olson Version: %s
# DO NOT EDIT!
package DateTime::TimeZone::FromCountry::Zone;
use strict;
use base qw( Exporter );
our @EXPORT_OK = qw($Map);

our $Map = %s

1;
TEMPLATE
    close $fh;

    warn "All done!\n";
}

